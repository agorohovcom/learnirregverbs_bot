package com.agorohov.learnirregverbs_bot.component.update_handler.text_message_update_handler.strategy;

import com.agorohov.learnirregverbs_bot.component.update_handler.ProcessingStrategy;
import com.agorohov.learnirregverbs_bot.component.update_handler.UpdateWrapper;
import com.agorohov.learnirregverbs_bot.dto.LearningStatisticsDTO;
import com.agorohov.learnirregverbs_bot.service.LearningStatisticsService;
import com.agorohov.learnirregverbs_bot.service.VerbService;
import com.agorohov.learnirregverbs_bot.utils.MessageBuilder;
import java.util.List;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;

@Component
@Slf4j
@RequiredArgsConstructor
public class StatTextStrategy implements ProcessingStrategy {

    private final LearningStatisticsService learningStatisticsService;
    private final VerbService verbService;

    @Override
    public BotApiMethod processUpdate(UpdateWrapper wrapper) {
        wrapper.setStrategy(this.getClass().getSimpleName());

        List<LearningStatisticsDTO> statistics = learningStatisticsService
                .getAllStatisticsById(wrapper.getMessage().getChatId());

        String textToSend = "";
        var sendMessage = MessageBuilder
                .create()
                .setChatId(wrapper.getMessage().getChatId());

        if (!statistics.isEmpty()) {
            int verbsCount = verbService.getCount();
            int appemptsTotal = statistics
                    .stream()
                    .mapToInt(e -> e.getAttempts())
                    .sum();
            int learnedVerbsAmount = statistics.size();
            int learnedVerbsPercent = 100 * learnedVerbsAmount / verbsCount;
            int hightRateVerbs = (int) statistics
                    .stream()
                    .filter(e -> e.getRank() >= 5)
                    .count();
            int midRateVerbs = (int) statistics
                    .stream()
                    .filter(e -> e.getRank() >= 3 && e.getRank() < 5)
                    .count();
            int hightRateVerbsPercent = 100 * hightRateVerbs / verbsCount;
            int midRateVerbsPercent = 100 * midRateVerbs / verbsCount;

            textToSend = "ùïäùï•ùïíùï•ùïöùïîùï•ùïöùïîùï§\n\n"
                    + wrapper.getMessage().getChat().getUserName()
                    + ", –≤–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                    + " ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: <b>" + appemptsTotal + "</b>\n"
                    + " ‚Ä¢ –í—Å—Ç—Ä–µ—á–µ–Ω–æ –≥–ª–∞–≥–æ–ª–æ–≤: <b>" + learnedVerbsAmount + " (" + learnedVerbsPercent + " %)</b>\n"
                    + " ‚Ä¢ –•–æ—Ä–æ—à–æ –∏–∑—É—á–µ–Ω–æ: <b>" + hightRateVerbs + " (" + hightRateVerbsPercent + " %)</b>\n"
                    + " ‚Ä¢ –°—Ä–µ–¥–Ω–µ –∏–∑—É—á–µ–Ω–æ: <b>" + midRateVerbs + " (" + midRateVerbsPercent + " %)</b>\n\n"
                    + "–£—Å–ø–µ—Ö–æ–≤ —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏!";

            sendMessage.setText(textToSend)
                    .row()
                    .button("–û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "/stat_reset")
                    .endRow()
                    .row()
                    .button("–£—á–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã", "/learn")
                    .endRow()
                    .row()
                    .button("<< –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start")
                    .endRow();
        } else {
            textToSend = "ùïäùï•ùïíùï•ùïöùïîùï•ùïöùïîùï§\n\n"
                    + wrapper.getMessage().getChat().getUserName() + ", —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–∞.\n\n"
                    + "–ò–∑—É—á–∞–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã, –∏ —Å –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è.";

            sendMessage.setText(textToSend)
                    .row()
                    .button("–£—á–∏—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã", "/learn")
                    .endRow()
                    .row()
                    .button("<< –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start")
                    .endRow();
        }

        log.info("The user (id = " + wrapper.getMessage().getChatId() + ") requested his statistics");
        return updateOrCreateMessage(wrapper, sendMessage);
    }
}
