package com.agorohov.learnirregverbs_bot.component.update_handler.text_message_update_handler.strategy;

import com.agorohov.learnirregverbs_bot.component.update_handler.ProcessingStrategyAbstractImpl;
import com.agorohov.learnirregverbs_bot.component.update_handler.UpdateWrapper;
import com.agorohov.learnirregverbs_bot.service.CacheService;
import com.agorohov.learnirregverbs_bot.service.UserService;
import com.agorohov.learnirregverbs_bot.utils.MessageBuilder;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class AdminTextStrategy extends ProcessingStrategyAbstractImpl {
    
    private final UserService userService;
    private final CacheService cacheService;

    @Override
    protected MessageBuilder strategyRealization(UpdateWrapper wrapper) {
        return MessageBuilder
                .create()
                .setChatId(wrapper.getSupportedMessageOrNull().getChatId())
                .setText(textBuilder(wrapper))
                .row()
                .button("–í—ã–∑–≤–∞—Ç—å GC", "/admin_call_gc")
                .endRow()
                .row()
                .button("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –≥–ª–∞–≥–æ–ª–æ–≤", "/admin_clear_verbs_cache")
                .endRow()
                .row()
                .button("–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", "/admin_shutdown")
                .endRow()
                .row()
                .button("<< –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/start")
                .endRow();
    }
    
    private String textBuilder(UpdateWrapper wrapper) {
        StringBuilder result = new StringBuilder();
        result
                .append("üë®‚Äçüíª ")  //—ç–º–æ–¥–∑–∏
                .append("ùî∏ùïïùïûùïöùïü\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Ö–æ–∑—è–∏–Ω!\n\n")
                .append("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ:\n")
                .append(workingTime(wrapper.getBotStartsAt()))
                .append("\n\n")
                .append("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n")
                .append(userService.getCount())
                .append("\n\n")
                .append("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞–º—è—Ç–∏:\n")
                .append(getUsedMB())
                .append(" –ú–±\n\n")
                .append("–†–∞–∑–º–µ—Ä –∫—ç—à–∞ –≥–ª–∞–≥–æ–ª–æ–≤:\n")
                .append(cacheService.getCacheSize("verbs"))
                .append("\n\n");
        
        
        return result.toString();
    }
    
    private String workingTime(long start) {
        long tms = (System.currentTimeMillis() - start) / 1000;
        long days = tms / 86400;
        long hours = (tms - days * 86400) / 3600;
        long minutes = (tms - days * 86400 - hours * 3600) / 60;
        long seconds = tms - days * 86400 - hours * 3600 - minutes * 60;

        return String.format("%d –¥. : %d —á. : %d –º–∏–Ω. : %d —Å–µ–∫.",
                days, hours, minutes, seconds);
    }

    /**
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –ú–ë
     */
    private int getUsedMB() {
        return (int) (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1048576;
    }
}
