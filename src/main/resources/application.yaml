server:
  port: 9999

spring:
  mvc:
    log-request-details: true
  liquibase:
    enabled: true
    # change-log можно не указывать, это имя и этот путь используется в Liquibase поnумолчанию
    change-log: classpath:db/changelog/db.changelog-master.yaml
  datasource:
    url: jdbc:h2:file:./db/db
    # url: jdbc:h2:file:/app/db/db
    # url: jdbc:h2:file:/var/lib/agorohov.com/tgbot/irregularverbs/appdb
    username: u
    password:
  jpa:
    # По умолчанию сценарии data.sql выполняются до инициализации Hibernate.
    # Нам нужен Hibernate для создания таблиц перед вставкой в ​​них данных.
    # Чтобы добиться этого, нам нужно отложить инициализацию нашего источника данных.
    # Для этого мы воспользуемся свойством spring.jpa.defer-datasource-initialization=true
    #defer-datasource-initialization: true
    open-in-view: true
    hibernate:
      # ddl-auto: create, update, create-drop, validate, none
      ddl-auto: validate
#    вывод sql в консоль
#      show-sql:
#        false
    properties:
      hibernate:
        # форматирование вывода запросов в консоль
        format_sql: true
        # включает генерирование статистики о запросах на уровне Hibernate
        # generate_statistics: true
        # включает сортировку запросов по имени таблицы.
        # В случае если инсерты не отсортированы по имени таблицы, 
        # они не могут быть объеденины в один батч и будут разделены на несколько батчей
        # order_inserts: true
        # jdbc.batch_size: 1000
        # enable_lazy_load_no_trans: true
  # Обратите внимание, что для любой инициализации на основе сценария,
  # то есть для вставки данных через data.sql или создания схемы через Schema.sql,
  # нам необходимо установить свойство spring.sql.init.mode=always
  #sql:
    #init:
      #mode: always

  h2:
    console:
      enabled: true
  
bot:
  name: ${IRRVERBSBOTNAME}
  token: ${IRRVERBSBOTTOKEN}
  owner: ${IRRVERBSBOTOWNER}

cron:
  # секунды / минуты / часы / день / месяц / день недели  
  cleanOldLearnSessions: '0 0 */2 * * *'