server:
  port: ${SERVER_PORT}

logging:
  file:
    name: ${LOG_FILE}
  path: ${LOG_DIR}

spring:
  mvc:
    log-request-details: true
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/db.changelog-master.yaml
  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
  jpa:
    # defer-datasource-initialization: true
    open-in-view: true
    hibernate:
      # ddl-auto: create, update, create-drop, validate, none
      ddl-auto: validate
    properties:
      hibernate:
        # Форматирование вывода запросов в консоль
        format_sql: true
        # Включает генерирование статистики о запросах на уровне Hibernate
        # generate_statistics: true
        # включает сортировку запросов по имени таблицы.
        # В случае если инсерты не отсортированы по имени таблицы, 
        # они не могут быть объеденины в один батч и будут разделены на несколько батчей
        # order_inserts: true
        # jdbc.batch_size: 1000
        # enable_lazy_load_no_trans: true
  # для любой инициализации на основе сценария,
  # то есть для вставки данных через data.sql или создания схемы через Schema.sql,
  # нам необходимо установить свойство spring.sql.init.mode=always
  #sql:
    #init:
      #mode: always

  h2:
    console:
      enabled: ${H2_CONSOLE_ENABLED}
  
bot:
  name: ${IRR_VERBS_BOT_NAME}
  token: ${IRR_VERBS_BOT_TOKEN}
  owner: ${IRR_VERBS_BOT_OWNER}

cron:
  # секунды / минуты / часы / день / месяц / день недели
  cleanOldLearnSessions: '0 0 */2 * * *'
  
session:
    verbs_amount: 5
    cycles_amount: 2